#include "cpu.h"
#include <cstdio>
#include <cstring>
#include <iostream>
#include <stdio.h>

unsigned char chip8_fontset[80] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

void cpu::init() {
  pc = 0x200;                        // Program Counter to start of program
  opcode = 0;                        // Reset current opcode
  I = 0;                             // reset index register
  sp = 0;                            // reset stack pointer
  memset(memory, 0, sizeof(memory)); // clear memory
  memset(stack, 0, sizeof(stack));   // clear stack
  memset(gfx, 0, sizeof(gfx));

  // Load font into memory
  for (int i = 0; i < 80; i++) {
    memory[i] = chip8_fontset[i];
  }
}

int cpu::loadRom(const char *romName) {
  int count = 0;
  FILE *rom = fopen(romName, "rb");
  if (!rom) {
    std::cout << "Error: opening rom";
    return 1;
  }
  while (!feof(rom)) {
    fread(&memory[0x200 + count], 1, 1, rom);
    count++;
  }
  fclose(rom);

  // // DEBUG
  // for (int i = 0x200; i < 0x1000; i++) {
  //   std::cout << std::hex << memory[i] << " ";
  // }

  return 0;
}
